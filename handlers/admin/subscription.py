import asyncio

from aiogram.enums import ChatMemberStatus
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, JOIN_TRANSITION
from aiogram.types import Message, ChatMemberUpdated
from loguru import logger

from handlers.admin.admin import delete_message_after_delay
from system.dispatcher import bot
from system.dispatcher import router
from utils.models import get_required_channel_for_group, get_required_channel_username_for_group, \
    get_groups_by_channel_id


@router.message()
async def check_subscription(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É / –∫–∞–Ω–∞–ª"""
    if message.chat.type not in ['group', 'supergroup']:
        return
    try:
        result = get_required_channel_for_group(message)
        if not result:
            return
        required_channel_id, required_channel_username = result
        member = await bot.get_chat_member(required_channel_id, message.from_user.id)
        if member.status not in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç
            bot_message = await message.answer(
                f"{message.from_user.mention_html()}, –ø—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —É—é—Ç–Ω–æ–π –∏ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ—Ç —Å–ø–∞–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {required_channel_username} ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç. ü§ñ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å, –∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üåü",
                parse_mode="HTML"
            )
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(bot_message, 60))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.delete()
        user_mention = message.from_user.mention_html() if message.from_user.username else f"User {message.from_user.id}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º username –∏–∑ –±–∞–∑—ã –∏–ª–∏ ID, –µ—Å–ª–∏ username –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        result = get_required_channel_username_for_group(message)
        channel_username = result[0] if result else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –æ–±—ä–µ–∫—Ç
        bot_message = await message.answer(
            f"{user_mention}, –ø—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –Ω–∞—à–∞ –≥—Ä—É–ø–ø–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —É—é—Ç–Ω–æ–π –∏ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ—Ç —Å–ø–∞–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_username} ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç. ü§ñ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å, –∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞. –°–ø–∞—Å–∏–±–æ, –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üåü",
            parse_mode="HTML")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after_delay(bot_message, 60))


@router.chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def on_chat_member_update(update: ChatMemberUpdated):
    if update.new_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR]:
        groups = get_groups_by_channel_id(update)
        for group in groups:
            try:
                member = await bot.get_chat_member(group[0], update.user.id)
                if member.status == ChatMemberStatus.RESTRICTED:
                    await bot.restrict_chat_member(
                        group[0],
                        update.user.id,
                        can_send_messages=True
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group[0]}: {e}")
                continue


def register_subscription_handlers():
    router.message.register(check_subscription)
    router.message.register(on_chat_member_update)
