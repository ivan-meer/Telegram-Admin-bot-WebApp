# -*- coding: utf-8 -*-
import asyncio
from loguru import logger
from telethon import TelegramClient, events
from telethon.errors import UserAlreadyParticipantError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Message

from scr.bot.system.dispatcher import api_id, api_hash

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "source_channels": ["@tehnik_shanel", "@hdgdhsvsvs"],
    "target_channel_id": -1001918436153,
    "keywords": ["–∫–∏–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω"],
    "session_name": "scr/setting/session_name"
}

# üß† –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç—Ä–µ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ –ø–∞–º—è—Ç–∏)
forwarded_messages = set()


async def process_message(client, message: Message, chat_id: int):
    if not message.message:
        return

    message_text = message.message.lower()
    msg_key = f"{chat_id}-{message.id}"

    if msg_key in forwarded_messages:
        return

    if any(keyword in message_text for keyword in CONFIG["keywords"]):
        logger.info(f"üìå –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ. –ü–µ—Ä–µ—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ ID={message.id}")
        try:
            await client.forward_messages(CONFIG["target_channel_id"], message)
            forwarded_messages.add(msg_key)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")


async def join_required_channels(client: TelegramClient):
    for channel in CONFIG["source_channels"]:
        try:
            logger.info(f"üîó –ü—Ä–æ–±—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}...")
            await client(JoinChannelRequest(channel))
            logger.success(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except UserAlreadyParticipantError:
            logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {channel}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel}: {e}")


async def filter_messages():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    client = TelegramClient(CONFIG["session_name"], api_id, api_hash)
    await client.connect()

    await join_required_channels(client)

    @client.on(events.NewMessage(chats=CONFIG["source_channels"]))
    async def handle_new_message(event: events.NewMessage.Event):
        await process_message(client, event.message, event.chat_id)

    logger.info("üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    try:
        await client.run_until_disconnected()
    finally:
        await client.disconnect()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def parser():
    try:
        asyncio.run(filter_messages())
    except KeyboardInterrupt:
        logger.warning("üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")


if __name__ == "__main__":
    parser()
